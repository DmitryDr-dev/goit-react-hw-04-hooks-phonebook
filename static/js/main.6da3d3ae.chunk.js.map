{"version":3,"sources":["components/AddContactForm/AddContactForm.jsx","components/Container/Container.jsx","components/Section/Section.jsx","components/ContactList/ContactList.jsx","components/ContactListItem/ContactListItem.jsx","components/Filter/Filter.jsx","App.js","index.js"],"names":["AddContactForm","onSubmit","useState","name","setName","number","setNumber","nameInputId","uuidv4","numberInputId","handleInputChange","e","target","value","trim","clearInput","className","preventDefault","newContactId","id","htmlFor","type","pattern","title","required","onChange","Container","children","Section","ContactList","contacts","deleteOnClick","map","ContactListItem","onClick","Filter","onFilterChange","filterInputId","testContacts","App","JSON","parse","window","localStorage","getItem","setContacts","filter","setFilter","useEffect","setItem","stringify","getFilteredContacts","useMemo","normalizedFilter","toLowerCase","contact","includes","newContact","console","log","normalizedContact","find","alert","toDeleteId","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6da3d3ae.chunk.js","sourcesContent":["// package import\r\nimport { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\n// styles import\r\nimport './AddContactForm.css';\r\n\r\nexport function AddContactForm({ onSubmit }) {\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n\r\n  // unique IDs for inputs\r\n  const nameInputId = uuidv4();\r\n  const numberInputId = uuidv4();\r\n\r\n  // function to handle changes on input\r\n  const handleInputChange = e => {\r\n    const { name, value } = e.target;\r\n\r\n    switch (name) {\r\n      case 'name':\r\n        setName(value.trim());\r\n        break;\r\n      case 'number':\r\n        setNumber(value.trim());\r\n        break;\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  // function to send data back to App\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n\r\n    const newContactId = uuidv4();\r\n    const newContact = { id: newContactId, name, number };\r\n\r\n    onSubmit(newContact);\r\n\r\n    clearInput();\r\n  };\r\n\r\n  // function to clear  after form submission\r\n  const clearInput = () => {\r\n    setName('');\r\n    setNumber('');\r\n  };\r\n\r\n  return (\r\n    <form className=\"contact-form\" onSubmit={handleSubmit}>\r\n      <label className=\"contact-form__label\" htmlFor={nameInputId}>\r\n        Name\r\n      </label>\r\n      <input\r\n        type=\"text\"\r\n        name=\"name\"\r\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n        required\r\n        id={nameInputId}\r\n        value={name}\r\n        onChange={handleInputChange}\r\n        className=\"contact-form__input\"\r\n      />\r\n      <label className=\"contact-form__label\" htmlFor={numberInputId}>\r\n        Number\r\n      </label>\r\n      <input\r\n        type=\"tel\"\r\n        name=\"number\"\r\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n        title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n        required\r\n        id={numberInputId}\r\n        value={number}\r\n        onChange={handleInputChange}\r\n        className=\"contact-form__input\"\r\n      />\r\n      <button type=\"submit\" className=\"contact-form__btn\">\r\n        Add Contact\r\n      </button>\r\n    </form>\r\n  );\r\n}\r\n\r\nAddContactForm.propTypes = {\r\n  onSubmit: PropTypes.func.isRequired,\r\n};\r\n","// package import\r\nimport PropTypes from 'prop-types';\r\n\r\n// styles import\r\nimport './Container.css';\r\n\r\nexport function Container({ children }) {\r\n  return <div className=\"container\">{children}</div>;\r\n}\r\n\r\nContainer.propTypes = {\r\n  children: PropTypes.node.isRequired, //?? node\r\n};\r\n","// package import\r\nimport PropTypes from 'prop-types';\r\n\r\n// styles import\r\nimport './Section.css';\r\n\r\nexport function Section({ title, children }) {\r\n  return (\r\n    <section className=\"section\">\r\n      {title && <h2 className=\"section__title\">{title}</h2>}\r\n      {children}\r\n    </section>\r\n  );\r\n}\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string,\r\n  children: PropTypes.node.isRequired, // ?? node\r\n};\r\n","// package import\r\nimport PropTypes from 'prop-types';\r\n\r\n// styles import\r\nimport './ContactList.css';\r\n\r\n// component import\r\nimport { ContactListItem } from '..';\r\n\r\nexport function ContactList({ contacts, deleteOnClick }) {\r\n  return (\r\n    <ul className=\"contacts\">\r\n      {contacts.map(({ id, name, number }) => {\r\n        return (\r\n          <li key={id} className=\"contacts__item\">\r\n            <ContactListItem\r\n              name={name}\r\n              number={number}\r\n              id={id}\r\n              deleteOnClick={deleteOnClick}\r\n            />\r\n          </li>\r\n        );\r\n      })}\r\n    </ul>\r\n  );\r\n}\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n    }),\r\n  ),\r\n  deleteOnClick: PropTypes.func.isRequired,\r\n};\r\n","// package import\r\nimport PropTypes from 'prop-types';\r\n\r\n// styles import\r\nimport './ContactListItem.css';\r\n\r\nexport function ContactListItem({ id, name, number, deleteOnClick }) {\r\n  return (\r\n    <div className=\"contact\">\r\n      <span>\r\n        <span className=\"contact__name\">{name}: </span>\r\n        <span className=\"contact__number\">{number}</span>\r\n      </span>\r\n      <button\r\n        type=\"button\"\r\n        className=\"contact__dlt-btn\"\r\n        onClick={() => deleteOnClick(id)}\r\n      >\r\n        Delete\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nContactListItem.propTypes = {\r\n  id: PropTypes.string.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n  number: PropTypes.string.isRequired,\r\n  deleteOnClick: PropTypes.func.isRequired,\r\n};\r\n","// package import\r\nimport PropTypes from 'prop-types';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\n// styles import\r\nimport './Filter.css';\r\n\r\nexport function Filter({ value, onFilterChange }) {\r\n  const filterInputId = uuidv4();\r\n\r\n  return (\r\n    <div className=\"filter\">\r\n      <label htmlFor={filterInputId} className=\"filter__label\">\r\n        Search\r\n      </label>\r\n      <input\r\n        type=\"text\"\r\n        className=\"filter__input\"\r\n        id={filterInputId}\r\n        value={value}\r\n        onChange={onFilterChange}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string.isRequired,\r\n  onFilterChange: PropTypes.func.isRequired,\r\n};\r\n","// import packages\nimport { useState, useEffect, useMemo } from 'react';\n\n// import components\nimport { AddContactForm } from './components';\nimport { Container } from './components';\nimport { Section } from './components';\nimport { ContactList } from './components';\nimport { Filter } from './components';\n\n// base contact list to test app\nconst testContacts = [\n  { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n  { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n  { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n  { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n];\n\nfunction App() {\n  // done get contacts from local storage on first load\n  const [contacts, setContacts] = useState(() => {\n    return (\n      JSON.parse(window.localStorage.getItem('contacts')) ?? [...testContacts]\n    );\n  });\n  const [filter, setFilter] = useState('');\n\n  // done save contacts to local storage on update\n  useEffect(() => {\n    localStorage.setItem('contacts', JSON.stringify(contacts));\n  }, [contacts]);\n\n  // done function to save data sent on contact form submit\n  const formSubmitHandler = newContact => {\n    console.log('new contact', newContact);\n\n    setContacts(contacts => {\n      const normalizedContact = newContact.name.toLowerCase();\n      // check for duplicated contacts\n      if (\n        contacts.find(\n          contact => contact.name.toLowerCase() === normalizedContact,\n        )\n      ) {\n        return alert(`${newContact.name} already exists!`);\n      }\n      // setting new contact to existing collection\n      return [...contacts, newContact];\n    });\n  };\n\n  // done function to delete contact\n  const onDeleteContact = toDeleteId => {\n    console.log(toDeleteId);\n\n    return setContacts(contacts =>\n      contacts.filter(contact => {\n        return contact.id !== toDeleteId;\n      }),\n    );\n  };\n\n  // done function to track filter input changes\n  const onFilterChange = e => {\n    setFilter(e.target.value);\n    // getFilteredContacts();\n  };\n\n  // done function to display filtered contacts\n  const getFilteredContacts = useMemo(() => {\n    const normalizedFilter = filter.toLowerCase().trim();\n\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter),\n    );\n  }, [contacts, filter]);\n\n  return (\n    <Container>\n      <h1>Your Contacts</h1>\n      <Section>\n        <AddContactForm onSubmit={formSubmitHandler} />\n      </Section>\n      <Section title=\"Contact List\">\n        <Filter value={filter} onFilterChange={onFilterChange} />\n        <ContactList\n          contacts={getFilteredContacts}\n          deleteOnClick={onDeleteContact}\n        />\n      </Section>\n    </Container>\n  );\n}\n\nexport default App;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}